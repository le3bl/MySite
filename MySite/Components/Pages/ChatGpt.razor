@page "/chatgpt"
@using Microsoft.AspNetCore.Authorization
@using Markdig
@attribute [Authorize(Policy = "DebugOrAuthorized")]
@rendermode InteractiveServer
@inject OpenAIService OpenAIService
@inject IJSRuntime JSRuntime

<h3>ChatGpt</h3>

<div class="mb-3">
    <label for="promptInput" class="form-label">Enter your prompt:</label>
    <input @bind="prompt" class="form-control" id="promptInput" @onkeyup="HandleKeyUp" />
    <label for="promptInput" class="form-label">Select Model:</label>
    <select @bind="selectedModel" class="form-select my-2" id="modelSelect">
        @foreach (var model in OpenAIService.GptModels)
        {
            <option value="@model.Value">@model.Key</option>
        }
    </select>
</div>

<button class="btn btn-primary mx" @onclick="HandleSubmit">Submit</button>
@if (!string.IsNullOrEmpty(response))
{
    <button class="btn btn-secondary mx-2" @onclick="CopyToClipboard">Copy to Clipboard</button>
}

@if (isLoading)
{
    <div class="mt-3">
        <h5>Loading...</h5>
    </div>
}else if (!string.IsNullOrEmpty(response))
{
    <div class="mt-3">
        <h5>Response:</h5>
        <p>@((MarkupString)htmlContent)</p>
    </div>
}

@code {
    private string prompt;
    private string response;
    private string htmlContent;
    private bool isLoading = false;
    private string selectedModel = "gpt-3.5-turbo";

    private async Task HandleSubmit()
    {
        if (isLoading) return; // Prevent further clicks while loading

        isLoading = true;
        response = await OpenAIService.GetResponseAsync(prompt, selectedModel);
        htmlContent = ConvertMarkdownToHtml(response);
        isLoading = false;
    }

    private string ConvertMarkdownToHtml(string markdown)
    {
        // Use Markdig to convert markdown to HTML
        return Markdown.ToHtml(markdown ?? "");
    }

    private async Task HandleKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await HandleSubmit();
        }
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", response);
    }
}